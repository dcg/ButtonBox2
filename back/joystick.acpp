#include "Arduino.h"
#include "Mouse.h"
#include <RotaryEncoder.h>

#include <SemihostingStream.h>
SemihostingStream sh;
// extern "C" void initialise_monitor_handles(void);

// Set LED_BUILTIN if it is not defined by Arduino framework
// #define LED_BUILTIN 13
// build_flags =
// -D PIO_FRAMEWORK_ARDUINO_ENABLE_CDC
//    -D USBCON

#define encoderPinA PC14
#define encoderPinB PC15
long oldPosition  = -999;
RotaryEncoder *encoder = nullptr;

void doEncoderA();
void doEncoderB();
void updateEncoder();

volatile unsigned int encoderPos = 0; // a counter for the dial
volatile int direction = 0;
volatile int stable = 0;
unsigned int lastReportedPos = 1; // change management
static boolean rotating = false;  // debounce management
// interrupt service routine variables
boolean A_set = false;
boolean B_set = false;

int val1 = 0;
int val2 = 0;
int val3 = 0;
int range = 18;            // output range of X or Y movement
int responseDelay = 5;     // response delay of the mouse, in ms
int threshold = range / 5; // resting threshold
int center = range / 2;

bool mouseIsActive = false; // whether or not to control the mouse
int lastSwitchState = LOW;

void checkPosition()
{
    sh.print("I");
  encoder->tick(); // just call tick() to check the state.
}


int readAxis(int thisAxis)
{
    // read the analog input:
    int reading = analogRead(thisAxis);

    // map the reading from the analog input range to the output range:
    reading = map(reading, 497, 527, 0, range);

    // if the output reading is outside from the rest position threshold, use it:
    int distance = reading - center;

    if (abs(distance) < threshold)
    {
        distance = 0;
    }

    // return the distance for this axis:
    return distance;
}

void setup()
{
    // Serial.begin(9600);
    //  initialise_monitor_handles();
    // sh.println(" INIT PRINTF Hello World\n");
    sh.println("INIT //SH hello world!");
//
    // initialize LED digital pin as an output.
    pinMode(PC13, OUTPUT);
    // A0 497 511 527
    pinMode(PA0, INPUT_PULLDOWN);
    // A1=  498 511 526
    pinMode(PA1, INPUT_PULLDOWN);

    pinMode(PA2, INPUT_PULLDOWN);
    pinMode(PB4, INPUT_PULLUP); // the switch pin

    // //sh.println("hello world!");
    Mouse.begin();

//    pinMode(encoderPinA, INPUT_PULLDOWN);
//    pinMode(encoderPinB, INPUT_PULLDOWN);
    // digitalWrite(encoderPinA, HIGH);        // turn on pullup resistors
    // digitalWrite(encoderPinB, HIGH);        // turn on pullup resistors
//    attachInterrupt(PC15, doEncoderA, CHANGE); // encoder pin on interrupt 0 (pin 2)
//    attachInterrupt(PC14, doEncoderA, CHANGE); // encoder pin on interrupt 1 (pin 3)
  encoder = new RotaryEncoder(PC14, PC15, RotaryEncoder::LatchMode::TWO03);
  attachInterrupt(PC14, checkPosition, CHANGE);
  attachInterrupt(PC15, checkPosition, CHANGE);
}

void actionButton()
{
    Serial.print("Button: ");
    // Serial.print ( button );
    Serial.print(" | ");
    Serial.println(encoderPos, DEC);
} // ------------------ actionButton --------------------------------

void actionPosition()
{
    Serial.print("Position: ");
    Serial.print(encoderPos, DEC);
    Serial.print(" | ");
    // Serial.println ( button );
}

#define CLK encoderPinA
#define DT encoderPinB

int currentStateCLK = 0;
int lastStateCLK = 0;
int counter;
String currentDir = "--";


void loop()
{
static int pos = 0;

  encoder->tick(); // just call tick() to check the state.

  int newPos = encoder->getPosition();
  if (pos != newPos) {
    sh.print("pos:");
    sh.print(newPos);
    sh.print(" dir:");
    sh.println((int)(encoder->getDirection()));
    pos = newPos;
  } // if
}
   /* digitalWrite(PC13, LOW);
    int foo = digitalRead(PC14);
   // sh.print("PC14=");
   // sh.println(foo);
    int switchState = digitalRead(PB4);
    // sh.print("switch state:");
    // sh.println(switchState);
    if (switchState != lastSwitchState)
    {
        if (switchState == HIGH)
        {
            mouseIsActive = !mouseIsActive;
            // turn on LED to indicate mouse state:
            digitalWrite(PC13, mouseIsActive);
        }
    }
    lastSwitchState = switchState;

    // read and scale the two axes:
    int xReading = readAxis(PA0);
    int yReading = readAxis(PA1);
    // if the mouse control state is active, move the mouse:
    // sh.print("Mouse active: ");
    // sh.println(mouseIsActive);
    if (mouseIsActive)
    {
        // sh.println("move mouse:");
        // sh.print(xReading);
        // sh.print("/");
        // sh.print(yReading);
        Mouse.move(xReading, yReading, 0);
    }

    // delay(responseDelay);
    
        int CPYstable = stable;
        stable = 0;
        while (CPYstable != 0)
        {
            if (CPYstable > 0)
            {
                sh.println("...RIGHT");
                CPYstable = CPYstable - 1;
            }
            else if (CPYstable < 0)
            {
                sh.println("...LEFT");
                CPYstable = CPYstable + 1;
            }
            
        
    }*/

    	/*sh.print("Direction: ");
		sh.print(currentDir);
		sh.print(" | Counter: ");
		sh.println(counter);
*/
    //sh.println("loop end");
   // delay(1000);

int aaa1 = 0;
int bbb1 = 0;

int aaa2 = 0;
int bbb2 = 0;



void updateEncoder(){
	// Read the current state of CLK
	currentStateCLK = digitalRead(CLK);

	// If last and current state of CLK are different, then pulse occurred
	// React to only 1 state change to avoid double count
	if (currentStateCLK != lastStateCLK  && currentStateCLK == 1){

		// If the DT state is different than the CLK state then
		// the encoder is rotating CCW so decrement
		if (digitalRead(DT) != currentStateCLK) {
			counter --;
			currentDir ="CCW";
		} else {
			// Encoder is rotating CW so increment
			counter ++;
			currentDir ="CW";
		}
	}

	// Remember last CLK state
	lastStateCLK = currentStateCLK;
}
// ISR Interrupt on A changing state (Increment position counter)
void doEncoderA()
{
    aaa1 = digitalRead(encoderPinA);
    bbb1 = digitalRead(encoderPinB);
   /* sh.print("A:");
    sh.print(aaa1);
    sh.println(bbb1);

*/
    if (!aaa1 && bbb1)
    {
        stable = stable - 1;

    }
    else if (aaa1 && bbb1)
    {
        stable = stable + 1;
    }
 
   

} // ------------------- doEncoderA ----------------------------------------

// ISR Interrupt on B changing state, same as A above
void doEncoderB()
{
  /*  aaa1 = digitalRead(encoderPinA);
    bbb1 = digitalRead(encoderPinB);
    sh.print("B:");
    sh.print(aaa1);
    sh.println(bbb1);
    if (aaa1 && !bbb1)
    {
        direction = direction - 1;
    }
    else if (!aaa1 && bbb1)
    {
        direction = direction + 1;
    }
    else if (!aaa1 && !bbb1)
    {
        sh.print("settle:");
        sh.print(stable);
        sh.print("/");
        sh.println(direction);
        stable = stable + direction;
        direction = 0;
    }*/
} // -------------------- doEncoderB --------------------------------------