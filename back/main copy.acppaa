#include "Arduino.h"
#include "Mouse.h"
#include <SemihostingStream.h>
SemihostingStream sh;
// extern "C" void initialise_monitor_handles(void);

// Set LED_BUILTIN if it is not defined by Arduino framework
// #define LED_BUILTIN 13
// build_flags =
// -D PIO_FRAMEWORK_ARDUINO_ENABLE_CDC
//    -D USBCON

#define encoderPinA PC14
#define encoderPinB PC15
void readEncoder();
void printDelta();
void encoderInterrupt();

int16_t inputDelta = 0; // Counts up or down depending which way the encoder is turned
bool printFlag = false; // Flag to indicate that the value of inputDelta should be printed

void setup()
{
    pinMode(encoderPinA, INPUT_PULLUP);
    pinMode(encoderPinB, INPUT_PULLUP);
    attachInterrupt(encoderPinA, encoderInterrupt, CHANGE);
    attachInterrupt(encoderPinB, encoderInterrupt, CHANGE);
}

void loop()
{
    printDelta();
  //  sh.print("I");
}

volatile int state = 0;
int stateMachine(bool CLK, bool DT)
{
    switch (state)
    {
    case 0: // Idle state, encoder not turning
        if (!CLK)
        { // Turn clockwise and CLK goes low first
            state = 1;
        }
        else if (!DT)
        { // Turn anticlockwise and DT goes low first
            state = 4;
        }
        break;
    // Clockwise rotation
    case 1:
        if (!DT)
        { // Continue clockwise and DT will go low after CLK
            state = 2;
        }
        break;
    case 2:
        if (CLK)
        { // Turn further and CLK will go high first
            state = 3;
        }
        break;
    case 3:
        if (CLK && DT)
        { // Both CLK and DT now high as the encoder completes one step clockwise
            state = 0;
            ++inputDelta;
            printFlag = true;
        }
        break;
    // Anticlockwise rotation
    case 4: // As for clockwise but with CLK and DT reversed
        if (!CLK)
        {
            state = 5;
        }
        break;
    case 5:
        if (DT)
        {
            state = 6;
        }
        break;
    case 6:
        if (CLK && DT)
        {
            state = 0;
            --inputDelta;
            printFlag = true;
        }
        break;
    }
    return state;
}

void encoderInterrupt()
{
    bool CLK = digitalRead(encoderPinA);
    bool DT = digitalRead(encoderPinB);
    int state = stateMachine(DT, CLK);
}

void printDelta()
{
    if (printFlag)
    {
        printFlag = false;
        sh.println(inputDelta);
    }
}